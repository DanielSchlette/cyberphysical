/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cps.extended.concept.beans;

import cps.extended.concept.dao.DbManager;
import cps.extended.concept.entities.vulnerability.CpsVulnerability;
import cps.extended.concept.entities.vulnerability.CveCpsVulnerabilityMapping;
import java.io.Serializable;
import java.sql.Connection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.Query;

/**
 * Search for CPS-CVE-Entries
 *
 */
@SessionScoped
@Named("cpsVulnerabilitySearchController")
public class CpsVulnerabilityController implements Serializable {

    private String cpsVulnerabilitySearchString;

    private List<CpsVulnerability> cpsVulnerabilities;

    @Inject
    DbManager dbm;

    public CpsVulnerabilityController() {
    }

    public Connection getMySqlConnection() throws Exception {
        EntityManager em = dbm.getCapabilityDAO().getEntityManager();
        Connection conn = (Connection) em.unwrap(Connection.class);
        return conn;
    }

    public void searchCpsVulnerabilities() {
        try {

            if (cpsVulnerabilitySearchString == null || cpsVulnerabilitySearchString.isEmpty()) {
                return;
            }

            // substring
            String[] searchParams = cpsVulnerabilitySearchString.split(" ");

            EntityManager em = dbm.getCapabilityDAO().getEntityManager();

            String sql = "SELECT * FROM cps_vulnerability WHERE ";

            for (String searchParam : searchParams) {
                if (!searchParam.isEmpty() || !searchParam.equals("") || !searchParam.contains("'")) {
                    sql += "description LIKE '%" + searchParam + "%' AND ";
                }
            }
            sql = sql.substring(0, sql.length() - 4);
            sql += " OR ";

            for (String searchParam : searchParams) {
                if (!searchParam.isEmpty() || !searchParam.equals("") || !searchParam.contains("'")) {
                    sql += "cve_id LIKE '%" + searchParam + "%' AND ";
                }
            }
            sql = sql.substring(0, sql.length() - 4);

            Query cpsVulnerabilityQuery = em.createNativeQuery(sql, CpsVulnerability.class);
            List<CpsVulnerability> cpsVulnerabilities = (List<CpsVulnerability>) cpsVulnerabilityQuery.getResultList();

            for (CpsVulnerability cpsVulnerability : cpsVulnerabilities) {

                Long id = cpsVulnerability.getId();

                String sql2 = "SELECT ccvm.* FROM cve cve JOIN cve_cps_vulnerability_mapping ccvm ON ccvm.cve = cve.id JOIN cps_vulnerability cv ON cv.id = ccvm.cps_vulnerability WHERE cv.id = " + id;

                Query cveQuery = em.createNativeQuery(sql2, CveCpsVulnerabilityMapping.class);
                List<CveCpsVulnerabilityMapping> cveCpsVulnerabilityMappings = (List<CveCpsVulnerabilityMapping>) cveQuery.getResultList();

                cpsVulnerability.setCpsCveVulnerabilityMappings(cveCpsVulnerabilityMappings);

            }

            this.cpsVulnerabilities = cpsVulnerabilities;

        } catch (Exception ex) {
            Logger.getLogger(CpeController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public String getCpsVulnerabilitySearchString() {
        return cpsVulnerabilitySearchString;
    }

    public void setCpsVulnerabilitySearchString(String cpsVulnerabilitySearchString) {
        this.cpsVulnerabilitySearchString = cpsVulnerabilitySearchString;
    }

    public List<CpsVulnerability> getCpsVulnerabilities() {
        return cpsVulnerabilities;
    }

    public void setCpsVulnerabilities(List<CpsVulnerability> cpsVulnerabilities) {
        this.cpsVulnerabilities = cpsVulnerabilities;
    }
}
